package TicTakTicketCORBA.corbaTTT;


/**
* TicTakTicketCORBA/corbaTTT/_CorbaConterollerInterfaceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from corbaTTT.idl
* Dienstag, 19. November 2013 09:05 Uhr MEZ
*/

public class _CorbaConterollerInterfaceStub extends org.omg.CORBA.portable.ObjectImpl implements TicTakTicketCORBA.corbaTTT.CorbaConterollerInterface
{


  //falls null nicht geht einzelne Methoden mit jedem Parameter machen
  public TicTakTicketCORBA.corbaTTT.StructVernastaltung[] sucheVeranstaltungNachKriterien (String datum, String ort, String kuenstler)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("sucheVeranstaltungNachKriterien", true);
                $out.write_string (datum);
                $out.write_string (ort);
                $out.write_string (kuenstler);
                $in = _invoke ($out);
                TicTakTicketCORBA.corbaTTT.StructVernastaltung $result[] = TicTakTicketCORBA.corbaTTT.CorbaConterollerInterfacePackage.veranstaltungListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return sucheVeranstaltungNachKriterien (datum, ort, kuenstler        );
            } finally {
                _releaseReply ($in);
            }
  } // sucheVeranstaltungNachKriterien

  public TicTakTicketCORBA.corbaTTT.StructKategorie[] getKategorieVonVernastaltung (int vid)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getKategorieVonVernastaltung", true);
                $out.write_long (vid);
                $in = _invoke ($out);
                TicTakTicketCORBA.corbaTTT.StructKategorie $result[] = TicTakTicketCORBA.corbaTTT.CorbaConterollerInterfacePackage.kategorieListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getKategorieVonVernastaltung (vid        );
            } finally {
                _releaseReply ($in);
            }
  } // getKategorieVonVernastaltung

  public TicTakTicketCORBA.corbaTTT.StructKarte[] getAlleFeieKartenNachKategorie (int katid)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getAlleFeieKartenNachKategorie", true);
                $out.write_long (katid);
                $in = _invoke ($out);
                TicTakTicketCORBA.corbaTTT.StructKarte $result[] = TicTakTicketCORBA.corbaTTT.CorbaConterollerInterfacePackage.karteListHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getAlleFeieKartenNachKategorie (katid        );
            } finally {
                _releaseReply ($in);
            }
  } // getAlleFeieKartenNachKategorie

  public void verkaufSpeichern (TicTakTicketCORBA.corbaTTT.StructKarte[] listkarten)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("verkaufSpeichern", true);
                TicTakTicketCORBA.corbaTTT.CorbaConterollerInterfacePackage.karteListHelper.write ($out, listkarten);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                verkaufSpeichern (listkarten        );
            } finally {
                _releaseReply ($in);
            }
  } // verkaufSpeichern

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:TicTakTicketCORBA/corbaTTT/CorbaConterollerInterface:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _CorbaConterollerInterfaceStub
